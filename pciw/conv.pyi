from datetime import datetime
from typing import Union, Any, List, Optional, Tuple, Dict, overload, TypeVar
from . import tree

T1 = TypeVar("T1")
T2 = TypeVar("T2")

def removes(l: List[Union[T1, T2]], ldv: List[T2]) -> List[T1]: ...
def replaces(s: str, d: Dict[str, str]) -> str: ...
def startswiths(string: str, sl: List[str]) -> bool: ...

def to_bool(string: str) -> Optional[bool]: ...
def to_int(string: Optional[Union[str, int]]) -> Optional[int]: ...
def to_float(string: Optional[str]) -> Optional[float]: ...

def from_values(string: str) -> List[Dict[str, Optional[str]]]: ...
def from_csv(data: str, *, header: Optional[List[str]]=None, sep=",", end="\r\r\n") -> List[Dict[str, str]]: ...
def from_tcpu_data(s: str) -> tree.Tree: ...
def linux_bytes(string: Optional[Union[str, int]]) -> Optional[int]: ...

def windate_to_datetime(string: str) -> Optional[datetime]: ...
@overload
def winlang_to_tuple(string: List[str]) -> List[Tuple[str, str, str]]: ...
@overload
def winlang_to_tuple(string: str) -> Tuple[str, str, str]: ...

def sn(string: Optional[str]) -> Optional[str]: ...

